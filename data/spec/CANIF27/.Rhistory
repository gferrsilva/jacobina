alpha = .3,
col = "black",
linetype = 2)
# as linhas abaixo criam rótulos com o nome das bandas
asterlbl <- geom_text(
fontface = "bold", col = "red",
size = 3,
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
x = position,
y = 0,
label = bandas
)
)
# Fazendo ajustes na posição do texto (para evitar sobreposição)
asterdf$position[[5]] <- (asterdf$position[[5]]+25)
asterdf$position[[6]] <- (asterdf$position[[6]]+5)
# Gerando gráficos
library(dplyr)
# O gráfico abaixo mostra a linha média de cada amostra,
# colorida pelo intervalo do furo
ggplot(canif_avg %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(canif_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(jba_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none"
# Ajustando a pasta de trabalho
setwd("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/JBA")
# Carregando pacotes
library(readr)
# listando arquivos
files <- list.files(pattern = "*.txt")
df <- lapply(files, read_tsv, skip = 43)
#acessando o nome do furo, posição e id da leitura
names(df[[1]][2])
#atribuindo este caracter para cada item da lista, em uma terceira coluna
for (i in 1:length(df)) {
df[[i]][3] <- names(df[[i]][2])
}
#renomeando as colunas da lista
nome <- c("wave", "ref", "id")
df <- lapply(df, setNames, nm = nome)
#criando a coluna "from"
library(tidyr)
library(dplyr)
for (i in 1:length(df)) {
df[[i]] <- df[[i]] %>%
separate(col = id, into = c("furo", "from", "measure"), sep = "_")
}
#juntando o banco de dados e limpando o enviroment
jba_long <- bind_rows(df)
jba_long$from <-  as.numeric(jba_long$from)
jba_long <- jba_long %>%
group_by(from) %>%
arrange(from, wave)
remove(df)
# testando o código
jba_avg <- as_data_frame(jba_long) %>%
group_by(from, wave) %>%
summarise(ref = mean(ref))
# Criando o banco de dados da média das reflectâncias para wavelength < 1000
jba_long %>%
filter(wave < 1000) %>%
group_by(from) %>%
summarise(ref = mean(ref)) %>%
write_csv(path = "canif_ref.csv")
# Ajustando o banco de dados Aster
asterdf <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/Auxiliares/aster.txt")
asterdf$position <- (asterdf$xmin + asterdf$xmax)/2
names(asterdf)[names(asterdf) %in% "system"] = "Aster"
bandas <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
asterdf <- asterdf %>%
mutate(bandas = bandas)
# Criando objetos do ggplot para os intervalos de referência do aster
library(ggplot2)
aster <- geom_rect(
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Aster),
alpha = .3,
col = "black",
linetype = 2)
# as linhas abaixo criam rótulos com o nome das bandas
asterlbl <- geom_text(
fontface = "bold", col = "red",
size = 3,
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
x = position,
y = 0,
label = bandas
)
)
# Fazendo ajustes na posição do texto (para evitar sobreposição)
asterdf$position[[5]] <- (asterdf$position[[5]]+25)
asterdf$position[[6]] <- (asterdf$position[[6]]+5)
# Gerando gráficos
library(dplyr)
# O gráfico abaixo mostra a linha média de cada amostra,
# colorida pelo intervalo do furo
ggplot(jba_avg %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(jba_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.7) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_long %>%
filter(from > 0) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_long %>%
filter(from > 0) %>%
filter(from < 200), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_long %>%
filter(from > 0) %>%
filter(from < 300), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 100) %>%
filter(from < 200), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 200) %>%
filter(from < 300), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 300) %>%
filter(from < 400), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 400) %>%
filter(from < 500), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 500) %>%
filter(from < 600), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 600) %>%
filter(from < 700), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
ggplot(jba_avg %>%
filter(from > 700) %>%
filter(from < 800), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "n
ggplot(jba_avg %>%
filter(from > 800) %>%
filter(from < 900), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito")
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito.txt")
View(canif_lito)
remove(canif_lito)
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito.txt")
View(canif_lito)
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito.txt")
View(canif_lito)
class(canif_lito)
View(canif_lito)
# Ajustando a pasta de trabalho
setwd("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/CANIF")
# Carregando pacotes
library(readr)
# listando arquivos
files <- list.files(pattern = "*.txt")
df <- lapply(files, read_tsv, skip = 43)
#acessando o nome do furo, posição e id da leitura
names(df[[1]][2])
#atribuindo este caracter para cada item da lista, em uma terceira coluna
for (i in 1:length(df)) {
df[[i]][3] <- names(df[[i]][2])
}
#renomeando as colunas da lista
nome <- c("wave", "ref", "id")
df <- lapply(df, setNames, nm = nome)
#criando a coluna "from"
library(tidyr)
library(dplyr)
for (i in 1:length(df)) {
df[[i]] <- df[[i]] %>%
separate(col = id, into = c("furo", "from", "measure"), sep = "_")
}
#juntando o banco de dados e limpando o enviroment
canif_long <- bind_rows(df)
canif_long$from <-  as.numeric(canif_long$from)
canif_long <- canif_long %>%
group_by(from) %>%
arrange(from, wave)
remove(df)
# testando o código
canif_avg <- as_data_frame(canif_long) %>%
group_by(from, wave) %>%
summarise(ref = mean(ref))
# Criando o banco de dados da média das reflectâncias para wavelength < 1000
canif_long %>%
filter(wave < 1000) %>%
group_by(from) %>%
summarise(ref = mean(ref)) %>%
write_csv(path = "canif_ref.csv")
# Ajustando o banco de dados Aster
asterdf <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/Auxiliares/aster.txt")
asterdf$position <- (asterdf$xmin + asterdf$xmax)/2
names(asterdf)[names(asterdf) %in% "system"] = "Aster"
bandas <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
asterdf <- asterdf %>%
mutate(bandas = bandas)
# Criando objetos do ggplot para os intervalos de referência do aster
library(ggplot2)
aster <- geom_rect(
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Aster),
alpha = .3,
col = "black",
linetype = 2)
# as linhas abaixo criam rótulos com o nome das bandas
asterlbl <- geom_text(
fontface = "bold", col = "red",
size = 3,
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
x = position,
y = 0,
label = bandas
)
)
# Fazendo ajustes na posição do texto (para evitar sobreposição)
asterdf$position[[5]] <- (asterdf$position[[5]]+25)
asterdf$position[[6]] <- (asterdf$position[[6]]+5)
# Gerando gráficos
library(dplyr)
# O gráfico abaixo mostra a linha média de cada amostra,
# colorida pelo intervalo do furo
ggplot(canif_avg %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(canif_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# Carregando a tabela de lito
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito.txt")
View(canif_long)
unique(canif_long$from == canif_lito$From)
unique(canif_long$from) == unique(canif_lito$From)
unique(canif_long$from)
unique(canif_lito$From)
canif27 <- list(canif_lito, canif_long)
View(canif27)
canif27 <- list(Lito = canif_lito,Spec = canif_long)
View(canif27)
View(canif27)
canif_spec <- left_join(canif_long, canif_lito, by = from)
View(canif_long)
View(canif_lito)
colnames(canif_lito$From) <- from
colnames(canif_lito$From) <- "from"
names(canif_lito$From) <- "from"
View(canif_lito)
names(canif_lito$From) <- "from"
View(canif_lito)
names(canif_lito)[names(canif_lito)== "From"] <- "from"
View(canif_lito)
canif_spec <- left_join(canif_long, canif_lito, by = from)
canif_spec <- left_join(canif_long, canif_lito, by = "from")
View(canif_spec)
ggplot(canif_spec %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = Litotipo)) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
unique(canif_spec$Litotipo)
vazio <- is.na(canif_spec$Litotipo)
canif_spec[vazio]
canif_spec[[vazio]]
sum(vazio)
canif_spec[[vazio,]]
canif_spec[[vazio,]]
canif_spec[vazio,]
unique(canif_spec[vazio,4])
View(canif_spec)
problema <- list(unique(canif_spec[vazio,4]))
View(problema)
remove(problema)
problema <- c(unique(canif_spec[vazio,4]))
View(problema)
canif_long$from[from == 55.8]
canif_long[canif_long$from == 55.8]
remove(canif27)
sum(is.na(canif_spec$Litotipo))
sum(is.na(canif_spec$Litotipo))/2500
sum(is.na(canif_spec$Litotipo))/2350
sum(is.na(canif_spec$Litotipo))
unique(canif_spec[indice, 4])
indice <- is.na(canif_spec$Litotipo)
unique(canif_spec[indice, 4])
remove(vazio)
View(problema)
canif_spec[indice, 4]
View(canif_spec)
# Ajustando a pasta de trabalho
setwd("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/CANIF")
# Carregando pacotes
library(readr)
# listando arquivos
files <- list.files(pattern = "*.txt")
df <- lapply(files, read_tsv, skip = 43)
#acessando o nome do furo, posição e id da leitura
names(df[[1]][2])
#atribuindo este caracter para cada item da lista, em uma terceira coluna
for (i in 1:length(df)) {
df[[i]][3] <- names(df[[i]][2])
}
#renomeando as colunas da lista
nome <- c("wave", "ref", "id")
df <- lapply(df, setNames, nm = nome)
#criando a coluna "from"
library(tidyr)
library(dplyr)
for (i in 1:length(df)) {
df[[i]] <- df[[i]] %>%
separate(col = id, into = c("furo", "from", "measure"), sep = "_")
}
#juntando o banco de dados e limpando o enviroment
canif_long <- bind_rows(df)
canif_long$from <-  as.numeric(canif_long$from)
canif_long <- canif_long %>%
group_by(from) %>%
arrange(from, wave)
remove(df)
# testando o código
canif_avg <- as_data_frame(canif_long) %>%
group_by(from, wave) %>%
summarise(ref = mean(ref))
# Criando o banco de dados da média das reflectâncias para wavelength < 1000
canif_long %>%
filter(wave < 1000) %>%
group_by(from) %>%
summarise(ref = mean(ref)) %>%
write_csv(path = "canif_ref.csv")
# Ajustando o banco de dados Aster
asterdf <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Spec/Auxiliares/aster.txt")
asterdf$position <- (asterdf$xmin + asterdf$xmax)/2
names(asterdf)[names(asterdf) %in% "system"] = "Aster"
bandas <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
asterdf <- asterdf %>%
mutate(bandas = bandas)
# Criando objetos do ggplot para os intervalos de referência do aster
library(ggplot2)
aster <- geom_rect(
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Aster),
alpha = .3,
col = "black",
linetype = 2)
# as linhas abaixo criam rótulos com o nome das bandas
asterlbl <- geom_text(
fontface = "bold", col = "red",
size = 3,
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
x = position,
y = 0,
label = bandas
)
)
# Fazendo ajustes na posição do texto (para evitar sobreposição)
asterdf$position[[5]] <- (asterdf$position[[5]]+25)
asterdf$position[[6]] <- (asterdf$position[[6]]+5)
# Gerando gráficos
library(dplyr)
# O gráfico abaixo mostra a linha média de cada amostra,
# colorida pelo intervalo do furo
ggplot(canif_avg %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(canif_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# Carregando a tabela de lito
canif_lito <- read_tsv("C:/Users/guilherme.ferreira/Documents/CPRM/Doutorado/Dados/Lito/canif_lito.txt")
#Corrigindo o nome da variável "from"
names(canif_lito)[names(canif_lito)== "From"] <- "from"
# Fazendo o left_join by from
canif_spec <- left_join(canif_long, canif_lito, by = "from")
#verificando o número de is.na
sum(is.na(canif_spec$Litotipo))
# O código abaixo retorna os intervalos onde não houve compatibilidade
# do from da tabela spec com o from da tabela lito
indice <- is.na(canif_spec$Litotipo)
unique(canif_spec[indice, 4])
