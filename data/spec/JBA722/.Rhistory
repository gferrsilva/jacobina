a <- rnorm(n = 100, mean = 0, sd = 3)
shapiro.test(a)
a <- rnorm(n = 100, mean = 0, sd = 1)
shapiro.test(a)
a <- rnorm(n = 100, mean = 0, sd = .5)
shapiro.test(a)
a <- rnorm(n = 100, mean = 0, sd = .1)
shapiro.test(a)
a <- rnorm(n = 10000, mean = 0, sd = .1)
shapiro.test(a)
a <- rnorm(n = 1000, mean = 0, sd = .1)
shapiro.test(a)
density(a)
qqplot(a)
qqplot(a, y = a)
qqplot(a, y = "norm")
b <- rnorm(n = 1000, mean = 0, sd = .5)
qqplot(a, b)
shapiro.test(b)
b <- rnorm(n = 100, mean = 0, sd = .5)
shapiro.test(b)
qqplot(a, b)
b <- rnorm(n = 100, mean = 0, sd = 1)
shapiro.test(b)
qqplot(a, b)
b <- rnorm(n = 100, mean = 0, sd = 10)
shapiro.test(b)
density(a)
qqplot(a, b)
qqplot(a, b, ylim = c(-20,20))
qqplot(a, b, ylim = c(-30,30))
ppplot(a, b, ylim = c(-30,30))
pplot(a, b, ylim = c(-30,30))
qqplot(a, b, ylim = c(-30,30))
a <- rnorm(n = 1000, mean = 0, sd = 10)
b <- rnorm(n = 50, mean = 0, sd = 10)
shapiro.test(b)
qqplot(a, b, ylim = c(-30,30))
qqplot(a, b)
qqplot(a, b, ylim = c(-30, 30))
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 50, mean = 10, sd = 10)
shapiro.test(b)
density(a)
qqplot(a, b, ylim = c(-40, 40))
shapiro.test(b)
shapiro.test(a)
shapiro.test(b)
b <- rnorm(n = 5, mean = 10, sd = 10)
shapiro.test(b)
b <- rnorm(n = 5, mean = 0, sd = 10)
shapiro.test(b)
df <- as.data.frame(c(a, b))
library(ggplot)
library(ggplot2)
install.packages("ggplot2")
install.packages("tidyverse")
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 10)
shapiro.test(b)
density(a)
density(b)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 1000)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 100)
qqplot(a, b, ylim = c(-40, 40))
b <- rnorm(n = 5000, mean = 0, sd = 10)
a <- rnorm(n = 1000, mean = 0, sd = 14)
b <- rnorm(n = 5000, mean = 0, sd = 7.5)
qqplot(a, b, ylim = c(-40, 40))
library(ggplot2)
df <- as.data.frame(c(a, b))
ggplot(df, aes(x = a, y = ..density..)) + geom_density(alpha .3, col = "red") + geom_density(inherit.aes = FALSE, data = df, x = b, y = ..density)
ggplot(df, aes(x = a, y = ..density..)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b,
y = ..density.., alpha = .3)
ggplot(df, aes(x = a, y = ..density..)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
library(ggplot2)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red") +
geom_density(
inherit.aes = FALSE,
data = df,
x = b, alpha = .3)
ggplot(df, aes(x = a)) +
geom_density(alpha .3, col = "red")
ggplot(df, aes(x = a)) +
geom_density(col = "red")
a <- rnorm(n = 1000, mean = 0, sd = 14)
b <- rnorm(n = 5000, mean = 0, sd = 7.5)
df <- as.data.frame(c(a, b))
shapiro.test(b)
density(b)
qqplot(a, b, ylim = c(-40, 40))
library(ggplot2)
ggplot(df, aes(x = a)) +
geom_density(col = "red")
+
install.packages("markovchain")
# Ajustando a pasta de trabalho
setwd('C:/Users/GUILHERMEFERREIRA-PC/Documents/Doutorado/Dados/Spec/JBA')
# Carregando pacotes
library(readr)
# listando arquivos
files <- list.files(pattern = "*.txt")
df <- lapply(files, read_tsv, skip = 43)
#acessando o nome do furo, posição e id da leitura
names(df[[1]][2])
#atribuindo este caracter para cada item da lista, em uma terceira coluna
for (i in 1:length(df)) {
df[[i]][3] <- names(df[[i]][2])
}
#renomeando as colunas da lista
nome <- c("wave", "ref", "id")
df <- lapply(df, setNames, nm = nome)
#criando a coluna "from"
library(tidyr)
library(dplyr)
for (i in 1:length(df)) {
df[[i]] <- df[[i]] %>%
separate(col = id, into = c("furo", "from", "measure"), sep = "_")
}
#juntando o banco de dados e limpando o enviroment
jba_long <- bind_rows(df)
jba_long$from <-  as.numeric(jba_long$from)
jba_long <- jba_long %>%
filter(from != 234.22) %>%
filter(from != 258.10) %>%
filter(from != 604.55) %>%
mutate(from = replace(from, from == 234.55, 234.22)) %>%
mutate(from = replace(from, from == 329, 328)) %>%
mutate(from = replace(from, from == 461.62, 461.68)) %>%
mutate(from = replace(from, from == 487.42, 487.56)) %>%
mutate(from = replace(from, from == 537.13, 537.09)) %>%
mutate(from = replace(from, from == 602.74, 602.75)) %>%
mutate(from = replace(from, from == 604.59, 604.55)) %>%
mutate(from = replace(from, from == 612.72, 616.72)) %>%
mutate(from = replace(from, from == 622.70, 621.20)) %>%
mutate(from = replace(from, from == 624.49, 624.48)) %>%
mutate(from = replace(from, from == 738.09, 738.08)) %>%
mutate(from = replace(from, from == 744.79, 744.74)) %>%
group_by(from) %>%
arrange(from, wave)
remove(df)
# testando o código
jba_avg <- as_data_frame(jba_long) %>%
group_by(from, wave) %>%
summarise(ref = mean(ref))
# Criando o banco de dados da média das reflectâncias para wavelength < 1000
jba_long %>%
filter(wave < 1000) %>%
group_by(from) %>%
summarise(ref = mean(ref)) %>%
write_csv(path = "canif_ref.csv")
# Ajustando o banco de dados Aster
asterdf <- read_tsv('C:/Users/GUILHERMEFERREIRA-PC/Documents/Doutorado/Dados/Spec/Auxiliares/aster.txt')
asterdf$position <- (asterdf$xmin + asterdf$xmax)/2
names(asterdf)[names(asterdf) %in% "system"] = "Aster"
bandas <- c("B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9")
asterdf <- asterdf %>%
mutate(bandas = bandas)
# Criando objetos do ggplot para os intervalos de referência do aster
library(ggplot2)
aster <- geom_rect(
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
xmin = xmin,
xmax = xmax,
ymin = ymin,
ymax = ymax,
fill = Aster),
alpha = .3,
col = "black",
linetype = 2)
# as linhas abaixo criam rótulos com o nome das bandas
asterlbl <- geom_text(
fontface = "bold", col = "red",
size = 3,
inherit.aes = FALSE,
data = asterdf,
mapping = aes(
x = position,
y = 0,
label = bandas
)
)
# Fazendo ajustes na posição do texto (para evitar sobreposição)
asterdf$position[[5]] <- (asterdf$position[[5]]+25)
asterdf$position[[6]] <- (asterdf$position[[6]]+5)
# Gerando gráficos
library(dplyr)
# O gráfico abaixo mostra a linha média de cada amostra,
# colorida pelo intervalo do furo
ggplot(jba_avg %>%
filter(from > 800) %>%
filter(from < 900), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
# O gráfico abaixo mostra o intervalo (máximo e mínimo) de reflectância de cada amostra
ggplot(jba_long %>%
filter(from > 50) %>%
filter(from < 100), aes(x = wave, y = ref, col = as.factor(from))) +
aster + asterlbl +
geom_line(size = .72, alpha = .6) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() #+ theme(legend.position = "none")
jba_lito <- read_tsv('C:/Users/GUILHERMEFERREIRA-PC/Documents/Doutorado/Dados/Lito/jba_lito.txt')
#Corrigindo o nome da variável "from"
names(jba_lito)[names(jba_lito) == "From"] <- "from"
# Fazendo o left_join by from
jba_spec <- left_join(jba_long, jba_lito, by = "from")
#verificando o número de is.na
sum(is.na(jba_spec$Litotipo))
# O código abaixo retorna os intervalos onde não houve compatibilidade
# do from da tabela spec com o from da tabela lito. Problema resolvido
# entre as linhas 40 e 57
indice <- is.na(jba_spec$Litotipo)
unique(jba_spec[indice, 4])
# Testando a filtragem por litotipo
ggplot(jba_spec %>%
#filter(from > 100) %>%
filter(from < 200) %>%
filter(Litotipo == "Tremolitito"), aes(x = wave, y = ref, col = Litotipo)) +
aster + asterlbl +
geom_line(size = .72) + ylim(0, 0.6) +
ylab("Reflectance") + xlab("Wavelength (nm)") +
theme_bw() + facet_grid(from ~ .) #+ theme(legend.position = "none")
